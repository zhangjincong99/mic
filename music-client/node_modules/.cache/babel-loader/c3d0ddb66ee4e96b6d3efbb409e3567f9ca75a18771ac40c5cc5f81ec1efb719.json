{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { HttpManager } from \"@/api\";\nexport default {\n  data() {\n    return {\n      ranking: [] // 评分排行榜\n    };\n  },\n\n  mounted() {\n    this.getSongListRanking();\n  },\n  methods: {\n    async getSongListRanking() {\n      try {\n        const songList = await HttpManager.getSongList(); // 获取全部歌单\n\n        for (const key in songList) {\n          const list = songList[key];\n          const rank = await HttpManager.getRankOfSongListId(list.id); // 获取指定歌单的评分\n          let totalScore = 0;\n          let averageScore = 0;\n          if (rank.length > 0) {\n            for (const r of rank) {\n              totalScore += r.score;\n            }\n            averageScore = totalScore / rank.length;\n          }\n          this.ranking.push({\n            songListId: list.id,\n            title: list.title,\n            score: averageScore\n          });\n        }\n        this.ranking.sort((a, b) => b.score - a.score); // 按评分降序排序\n      } catch (error) {\n        console.error(\"获取歌单评分排行榜时出错：\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["HttpManager","data","ranking","mounted","getSongListRanking","methods","songList","getSongList","key","list","rank","getRankOfSongListId","id","totalScore","averageScore","length","r","score","push","songListId","title","sort","a","b","error","console"],"sources":["E:\\javaideaiu\\class22\\mic\\music-client\\src\\views\\song-sheet\\paihangbang.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>歌单评分排行榜</h2>\r\n    <ul>\r\n      <li v-for=\"item in ranking\" :key=\"item.songListId\">\r\n        <span>{{ item.title }}</span>\r\n        <span>评分：{{ item.score }}</span>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { HttpManager } from \"@/api\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      ranking: [], // 评分排行榜\r\n    };\r\n  },\r\n  mounted() {\r\n    this.getSongListRanking();\r\n  },\r\n  methods: {\r\n    async getSongListRanking() {\r\n      try {\r\n        const songList = await HttpManager.getSongList(); // 获取全部歌单\r\n\r\n        for (const key in songList) {\r\n          const list = songList[key];\r\n          const rank = await HttpManager.getRankOfSongListId(list.id); // 获取指定歌单的评分\r\n          let totalScore = 0;\r\n          let averageScore = 0;\r\n\r\n          if (rank.length > 0) {\r\n            for (const r of rank) {\r\n              totalScore += r.score;\r\n            }\r\n\r\n            averageScore = totalScore / rank.length;\r\n          }\r\n\r\n          this.ranking.push({\r\n            songListId: list.id,\r\n            title: list.title,\r\n            score: averageScore,\r\n          });\r\n        }\r\n\r\n        this.ranking.sort((a, b) => b.score - a.score); // 按评分降序排序\r\n      } catch (error) {\r\n        console.error(\"获取歌单评分排行榜时出错：\", error);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";AAaA,SAASA,WAAU,QAAS,OAAO;AAEnC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,EAAE,CAAE;IACf,CAAC;EACH,CAAC;;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,kBAAkB,CAAC,CAAC;EAC3B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,kBAAkBA,CAAA,EAAG;MACzB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMN,WAAW,CAACO,WAAW,CAAC,CAAC,EAAE;;QAElD,KAAK,MAAMC,GAAE,IAAKF,QAAQ,EAAE;UAC1B,MAAMG,IAAG,GAAIH,QAAQ,CAACE,GAAG,CAAC;UAC1B,MAAME,IAAG,GAAI,MAAMV,WAAW,CAACW,mBAAmB,CAACF,IAAI,CAACG,EAAE,CAAC,EAAE;UAC7D,IAAIC,UAAS,GAAI,CAAC;UAClB,IAAIC,YAAW,GAAI,CAAC;UAEpB,IAAIJ,IAAI,CAACK,MAAK,GAAI,CAAC,EAAE;YACnB,KAAK,MAAMC,CAAA,IAAKN,IAAI,EAAE;cACpBG,UAAS,IAAKG,CAAC,CAACC,KAAK;YACvB;YAEAH,YAAW,GAAID,UAAS,GAAIH,IAAI,CAACK,MAAM;UACzC;UAEA,IAAI,CAACb,OAAO,CAACgB,IAAI,CAAC;YAChBC,UAAU,EAAEV,IAAI,CAACG,EAAE;YACnBQ,KAAK,EAAEX,IAAI,CAACW,KAAK;YACjBH,KAAK,EAAEH;UACT,CAAC,CAAC;QACJ;QAEA,IAAI,CAACZ,OAAO,CAACmB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACN,KAAI,GAAIK,CAAC,CAACL,KAAK,CAAC,EAAE;MAClD,EAAE,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACvC;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}