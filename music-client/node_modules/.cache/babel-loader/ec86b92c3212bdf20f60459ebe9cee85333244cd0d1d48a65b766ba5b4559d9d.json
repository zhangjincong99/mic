{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Song List Ranking\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Rank\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Title\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Score\")])], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"table\", null, [_hoisted_3, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.songLists, (songList, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: songList.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString(index + 1), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(songList.title), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($options.calculateAverageScore(songList.id)), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_Fragment","_renderList","$data","songLists","songList","index","key","id","_toDisplayString","title","$options","calculateAverageScore"],"sources":["E:\\javaideaiu\\class22\\mic\\music-client\\src\\views\\song-sheet\\paihangbang.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h1>Song List Ranking</h1>\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Rank</th>\r\n          <th>Title</th>\r\n          <th>Score</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(songList, index) in songLists\" :key=\"songList.id\">\r\n          <td>{{ index + 1 }}</td>\r\n          <td>{{ songList.title }}</td>\r\n          <td>{{ calculateAverageScore(songList.id) }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { HttpManager } from \"@/api\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      songLists: [],\r\n      rankData: [],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.getSongLists();\r\n    this.getRankData();\r\n  },\r\n  methods: {\r\n    async getSongLists() {\r\n      try {\r\n        const response = await HttpManager.getSongList();\r\n        this.songLists = response.data;\r\n      } catch (error) {\r\n        console.error(\"Error getting song lists:\", error);\r\n      }\r\n    },\r\n    async getRankData() {\r\n      try {\r\n        const songListIds = this.songLists.map(songList => songList.id);\r\n        const promises = songListIds.map(songListId => HttpManager.getRankOfSongListId(songListId));\r\n        const responses = await Promise.all(promises);\r\n        this.rankData = responses.map(response => response.data);\r\n      } catch (error) {\r\n        console.error(\"Error getting rank data:\", error);\r\n      }\r\n\r\n      // getRankData方法首先使用map方法从songLists数组中提取所有歌单的ID，并为每个歌单ID构建一个请求。然后，使用Promise.all方法等待所有请求完成，并使用map方法提取每个请求的响应数据，将其存储在rankData数组中。\r\n      // calculateAverageScore方法用于计算给定歌单ID的平均评分。首先，我们通过filter方法从rankData数组中筛选出与给定歌单ID相匹配的评分数据。然后，我们使用map方法提取每个评分数据的分数，计算总分和平均分数。最后，我们返回计算得到的平均分数。\r\n\r\n    },\r\n    calculateAverageScore(songListId) {\r\n      if (!this.rankData || !Array.isArray(this.rankData)) return 0;\r\n\r\n      const filteredRankData = this.rankData\r\n        .filter(rankData => rankData && rankData.songListId === songListId);\r\n      if (filteredRankData.length === 0) return 0;\r\n\r\n      const scores = filteredRankData.map(rankData => rankData.score);\r\n      const sum = scores.reduce((accumulator, current) => accumulator + current, 0);\r\n      const averageScore = sum / scores.length;\r\n      return isNaN(averageScore) ? 0 : averageScore;\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style>\r\n  .container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100vh; /* 可以根据需要调整容器的高度 */\r\n  }\r\n  \r\n  table {\r\n    margin-top: 20px; /* 根据需要调整表格与标题之间的间距 */\r\n  }\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAW;gCACpBC,mBAAA,CAA0B,YAAtB,mBAAiB;gCAEnBA,mBAAA,CAMQ,gB,aALNA,mBAAA,CAIK,a,aAHHA,mBAAA,CAAa,YAAT,MAAI,G,aACRA,mBAAA,CAAc,YAAV,OAAK,G,aACTA,mBAAA,CAAc,YAAV,OAAK,E;;;uBAPjBC,mBAAA,CAkBM,OAlBNC,UAkBM,GAjBJC,UAA0B,EAC1BH,mBAAA,CAeQ,gBAdNI,UAMQ,EACRJ,mBAAA,CAMQ,iB,kBALNC,mBAAA,CAIKI,SAAA,QAAAC,WAAA,CAJ2BC,KAAA,CAAAC,SAAS,GAA7BC,QAAQ,EAAEC,KAAK;yBAA3BT,mBAAA,CAIK;MAJuCU,GAAG,EAAEF,QAAQ,CAACG;QACxDZ,mBAAA,CAAwB,YAAAa,gBAAA,CAAjBH,KAAK,sBACZV,mBAAA,CAA6B,YAAAa,gBAAA,CAAtBJ,QAAQ,CAACK,KAAK,kBACrBd,mBAAA,CAAiD,YAAAa,gBAAA,CAA1CE,QAAA,CAAAC,qBAAqB,CAACP,QAAQ,CAACG,EAAE,kB"},"metadata":{},"sourceType":"module","externalDependencies":[]}