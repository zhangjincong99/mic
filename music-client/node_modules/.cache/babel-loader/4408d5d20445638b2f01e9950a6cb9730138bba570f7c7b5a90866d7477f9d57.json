{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"歌单评分排行榜\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.songRankings, (item, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index\n    }, [_createElementVNode(\"span\", null, _toDisplayString(index + 1), 1 /* TEXT */), _createElementVNode(\"span\", null, _toDisplayString(item.title), 1 /* TEXT */), _createElementVNode(\"span\", null, _toDisplayString(item.score), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","songRankings","item","index","key","_toDisplayString","title","score"],"sources":["E:\\javaideaiu\\class22\\mic\\music-client\\src\\views\\paihangbang.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1>歌单评分排行榜</h1>\r\n      <ul>\r\n        <li v-for=\"(item, index) in songRankings\" :key=\"index\">\r\n          <span>{{ index + 1 }}</span>\r\n          <span>{{ item.title }}</span>\r\n          <span>{{ item.score }}</span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    data() {\r\n      return {\r\n        rankList: [\r\n          { id: 1, songListId: 2, consumerId: 2, score: 1 },\r\n          { id: 2, songListId: 2, consumerId: 2, score: 2 },\r\n          { id: 3, songListId: 1, consumerId: 1, score: 4 },\r\n          { id: 7, songListId: 13, consumerId: 1, score: 5 },\r\n          { id: 19, songListId: 21, consumerId: 1, score: 5 },\r\n          { id: 20, songListId: 31, consumerId: 1, score: 5 },\r\n          { id: 21, songListId: 5, consumerId: 1, score: 0 },\r\n          { id: 24, songListId: 11, consumerId: 1, score: 4 },\r\n          { id: 25, songListId: 10, consumerId: 1, score: 10 },\r\n          { id: 27, songListId: 6, consumerId: 1, score: 6 },\r\n          { id: 28, songListId: 7, consumerId: 1, score: 10 },\r\n          { id: 29, songListId: 1, consumerId: 26, score: 4 },\r\n          { id: 30, songListId: 7, consumerId: 26, score: 2 },\r\n          { id: 32, songListId: 3, consumerId: 26, score: 5 },\r\n          { id: 33, songListId: 14, consumerId: 26, score: 9 },\r\n        ],\r\n        songRankings: [],\r\n      };\r\n    },\r\n    mounted() {\r\n      this.calculateRankings();\r\n    },\r\n    methods: {\r\n      calculateRankings() {\r\n        // 按照歌单 ID 进行分组\r\n        const groupBySongList = this.rankList.reduce((acc, item) => {\r\n          const songListId = item.songListId;\r\n          if (!acc[songListId]) {\r\n            acc[songListId] = [];\r\n          }\r\n          acc[songListId].push(item);\r\n          return acc;\r\n        }, {});\r\n  \r\n        // 计算每个歌单的平均分数\r\n        const averageScores = Object.keys(groupBySongList).map((songListId) => {\r\n          const ratings = groupBySongList[songListId].map((item) => item.score);\r\n          const averageScore = ratings.reduce((sum, score) => sum + score, 0) / ratings.length;\r\n          return { songListId, averageScore };\r\n        });\r\n  \r\n        // 按照平均分数降序排序\r\n        averageScores.sort((a, b) => b.averageScore - a.averageScore);\r\n  \r\n        // 获取歌单标题等信息（此处为示例数据，实际应从API获取）\r\n        const songListDetails = {\r\n          2: { title: '歌单2' },\r\n          1: { title: '歌单1' },\r\n          13: { title: '歌单13' },\r\n          21: { title: '歌单21' },\r\n          31: { title: '歌单31' },\r\n          5: { title: '歌单5' },\r\n          11: { title: '歌单11' },\r\n          10: { title: '歌单10' },\r\n          6: { title: '歌单6' },\r\n          7: { title: '歌单7' },\r\n          3: { title: '歌单3' },\r\n          14: { title: '歌单14' },\r\n        };\r\n  \r\n        // 组装最终的排行榜数据\r\n        this.songRankings = averageScores.map((item, index) => {\r\n          const songListId = item.songListId;\r\n          const title = songListDetails[songListId].title;\r\n          const score = item.averageScore.toFixed(1);\r\n          return { title, score };\r\n        });\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style>\r\n  h1 {\r\n    font-size: 24px;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n  }\r\n  \r\n  li {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 10px;\r\n  }\r\n  \r\n  span:first-child {\r\n    margin-right: 10px;\r\n    font-weight: bold;\r\n  }\r\n  \r\n  span:last-child {\r\n    margin-left: auto;\r\n  }\r\n  </style>\r\n  "],"mappings":";gCAEMA,mBAAA,CAAgB,YAAZ,SAAO;;;uBADbC,mBAAA,CASM,cARJC,UAAgB,EAChBF,mBAAA,CAMK,c,kBALHC,mBAAA,CAIKE,SAAA,QAAAC,WAAA,CAJuBC,KAAA,CAAAC,YAAY,GAA5BC,IAAI,EAAEC,KAAK;yBAAvBP,mBAAA,CAIK;MAJsCQ,GAAG,EAAED;IAAK,IACnDR,mBAAA,CAA4B,cAAAU,gBAAA,CAAnBF,KAAK,sBACdR,mBAAA,CAA6B,cAAAU,gBAAA,CAApBH,IAAI,CAACI,KAAK,kBACnBX,mBAAA,CAA6B,cAAAU,gBAAA,CAApBH,IAAI,CAACK,KAAK,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}