{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { HttpManager } from \"@/api\";\nexport default {\n  data() {\n    return {\n      ranking: [] // 存储歌单评分数据的数组\n    };\n  },\n\n  created() {\n    this.createRanking();\n  },\n  methods: {\n    async createRanking() {\n      const songLists = await HttpManager.getSongList(); // 获取全部歌单\n\n      // 遍历每个歌单\n      for (const songList of songLists) {\n        const rankData = await HttpManager.getRankOfSongListId(songList.id); // 获取歌单评分数据\n\n        if (!Array.isArray(rankData)) {\n          continue; // 如果不是数组类型的数据，跳过该歌单\n        }\n\n        const averageScore = this.calculateAverageScore(rankData); // 计算歌单的平均评分\n\n        // 将歌单评分数据存储到对象中\n        const rankingEntry = {\n          songListId: songList.id,\n          averageScore: averageScore\n          // 其他相关信息\n        };\n\n        this.ranking.push(rankingEntry);\n      }\n      this.sortRanking(); // 对歌单评分数据进行排序\n    },\n\n    calculateAverageScore(rankData) {\n      // 实现计算歌单平均评分的逻辑\n      if (rankData.length === 0) {\n        return 0; // 没有评分数据，返回0\n      }\n\n      const totalScore = rankData.reduce((acc, curr) => acc + curr.score, 0);\n      return totalScore / rankData.length;\n    },\n    sortRanking() {\n      // 实现排序逻辑，根据评分对歌单进行排序\n      this.ranking.sort((a, b) => b.averageScore - a.averageScore);\n    }\n  }\n};","map":{"version":3,"names":["HttpManager","data","ranking","created","createRanking","methods","songLists","getSongList","songList","rankData","getRankOfSongListId","id","Array","isArray","averageScore","calculateAverageScore","rankingEntry","songListId","push","sortRanking","length","totalScore","reduce","acc","curr","score","sort","a","b"],"sources":["E:\\javaideaiu\\class22\\mic\\music-client\\src\\views\\song-sheet\\paihangbang.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>歌单评分排行榜</h2>\r\n    <ul>\r\n      <li v-for=\"(entry, index) in ranking\" :key=\"entry.songListId\">\r\n        {{ index + 1 }}. 歌单ID: {{ entry.songListId }}，平均评分: {{ entry.averageScore }}\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { HttpManager } from \"@/api\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      ranking: [], // 存储歌单评分数据的数组\r\n    };\r\n  },\r\n  created() {\r\n    this.createRanking();\r\n  },\r\n  methods: {\r\n    async createRanking() {\r\n      const songLists = await HttpManager.getSongList(); // 获取全部歌单\r\n\r\n      // 遍历每个歌单\r\n      for (const songList of songLists) {\r\n        const rankData = await HttpManager.getRankOfSongListId(songList.id); // 获取歌单评分数据\r\n\r\n        if (!Array.isArray(rankData)) {\r\n          continue; // 如果不是数组类型的数据，跳过该歌单\r\n        }\r\n\r\n        const averageScore = this.calculateAverageScore(rankData); // 计算歌单的平均评分\r\n\r\n        // 将歌单评分数据存储到对象中\r\n        const rankingEntry = {\r\n          songListId: songList.id,\r\n          averageScore: averageScore,\r\n          // 其他相关信息\r\n        };\r\n\r\n        this.ranking.push(rankingEntry);\r\n      }\r\n\r\n      this.sortRanking(); // 对歌单评分数据进行排序\r\n    },\r\n    calculateAverageScore(rankData) {\r\n      // 实现计算歌单平均评分的逻辑\r\n      if (rankData.length === 0) {\r\n        return 0; // 没有评分数据，返回0\r\n      }\r\n\r\n      const totalScore = rankData.reduce((acc, curr) => acc + curr.score, 0);\r\n      return totalScore / rankData.length;\r\n    },\r\n    sortRanking() {\r\n      // 实现排序逻辑，根据评分对歌单进行排序\r\n      this.ranking.sort((a, b) => b.averageScore - a.averageScore);\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";AAYA,SAASA,WAAU,QAAS,OAAO;AAEnC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,EAAE,CAAE;IACf,CAAC;EACH,CAAC;;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,CAAC,CAAC;EACtB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,aAAaA,CAAA,EAAG;MACpB,MAAME,SAAQ,GAAI,MAAMN,WAAW,CAACO,WAAW,CAAC,CAAC,EAAE;;MAEnD;MACA,KAAK,MAAMC,QAAO,IAAKF,SAAS,EAAE;QAChC,MAAMG,QAAO,GAAI,MAAMT,WAAW,CAACU,mBAAmB,CAACF,QAAQ,CAACG,EAAE,CAAC,EAAE;;QAErE,IAAI,CAACC,KAAK,CAACC,OAAO,CAACJ,QAAQ,CAAC,EAAE;UAC5B,SAAQ,CAAE;QACZ;;QAEA,MAAMK,YAAW,GAAI,IAAI,CAACC,qBAAqB,CAACN,QAAQ,CAAC,EAAE;;QAE3D;QACA,MAAMO,YAAW,GAAI;UACnBC,UAAU,EAAET,QAAQ,CAACG,EAAE;UACvBG,YAAY,EAAEA;UACd;QACF,CAAC;;QAED,IAAI,CAACZ,OAAO,CAACgB,IAAI,CAACF,YAAY,CAAC;MACjC;MAEA,IAAI,CAACG,WAAW,CAAC,CAAC,EAAE;IACtB,CAAC;;IACDJ,qBAAqBA,CAACN,QAAQ,EAAE;MAC9B;MACA,IAAIA,QAAQ,CAACW,MAAK,KAAM,CAAC,EAAE;QACzB,OAAO,CAAC,EAAE;MACZ;;MAEA,MAAMC,UAAS,GAAIZ,QAAQ,CAACa,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAE,GAAIC,IAAI,CAACC,KAAK,EAAE,CAAC,CAAC;MACtE,OAAOJ,UAAS,GAAIZ,QAAQ,CAACW,MAAM;IACrC,CAAC;IACDD,WAAWA,CAAA,EAAG;MACZ;MACA,IAAI,CAACjB,OAAO,CAACwB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACd,YAAW,GAAIa,CAAC,CAACb,YAAY,CAAC;IAC9D;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}