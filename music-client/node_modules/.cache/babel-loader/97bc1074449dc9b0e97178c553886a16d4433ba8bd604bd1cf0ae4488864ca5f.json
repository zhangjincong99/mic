{"ast":null,"code":"import { HttpManager } from \"@/api\";\nexport default {\n  data() {\n    return {\n      songLists: [],\n      rankData: []\n    };\n  },\n  mounted() {\n    this.getSongLists();\n    this.getRankData();\n  },\n  methods: {\n    async getSongLists() {\n      try {\n        const response = await HttpManager.getSongList();\n        this.songLists = response.data;\n      } catch (error) {\n        console.error(\"Error getting song lists:\", error);\n      }\n    },\n    async getRankData() {\n      try {\n        const response = await HttpManager.getRankOfSongListId();\n        this.rankData = response.data;\n      } catch (error) {\n        console.error(\"Error getting rank data:\", error);\n      }\n    },\n    calculateAverageScore(songListId) {\n      if (!this.rankData || !Array.isArray(this.rankData)) return 0;\n      const filteredRankData = this.rankData.filter(rank => rank && rank.songListId === songListId);\n      if (filteredRankData.length === 0) return 0;\n      const scores = filteredRankData.map(rank => rank.score);\n      const sum = scores.reduce((accumulator, current) => accumulator + current, 0);\n      const averageScore = sum / scores.length;\n      return isNaN(averageScore) ? 0 : averageScore;\n    }\n  }\n};","map":{"version":3,"names":["HttpManager","data","songLists","rankData","mounted","getSongLists","getRankData","methods","response","getSongList","error","console","getRankOfSongListId","calculateAverageScore","songListId","Array","isArray","filteredRankData","filter","rank","length","scores","map","score","sum","reduce","accumulator","current","averageScore","isNaN"],"sources":["E:\\javaideaiu\\class22\\mic\\music-client\\src\\views\\song-sheet\\paihangbang.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Song List Ranking</h1>\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Rank</th>\r\n          <th>Title</th>\r\n          <th>Score</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(songList, index) in songLists\" :key=\"songList.id\">\r\n          <td>{{ index + 1 }}</td>\r\n          <td>{{ songList.title }}</td>\r\n          <td>{{ calculateAverageScore(songList.id) }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { HttpManager } from \"@/api\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      songLists: [],\r\n      rankData: [],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.getSongLists();\r\n    this.getRankData();\r\n  },\r\n  methods: {\r\n    async getSongLists() {\r\n      try {\r\n        const response = await HttpManager.getSongList();\r\n        this.songLists = response.data;\r\n      } catch (error) {\r\n        console.error(\"Error getting song lists:\", error);\r\n      }\r\n    },\r\n    async getRankData() {\r\n      try {\r\n        const response = await HttpManager.getRankOfSongListId();\r\n        this.rankData = response.data;\r\n      } catch (error) {\r\n        console.error(\"Error getting rank data:\", error);\r\n      }\r\n    },\r\n    calculateAverageScore(songListId) {\r\n      if (!this.rankData || !Array.isArray(this.rankData)) return 0;\r\n      \r\n      const filteredRankData = this.rankData.filter(rank => rank && rank.songListId === songListId);\r\n      if (filteredRankData.length === 0) return 0;\r\n\r\n      const scores = filteredRankData.map(rank => rank.score);\r\n      const sum = scores.reduce((accumulator, current) => accumulator + current, 0);\r\n      const averageScore = sum / scores.length;\r\n      return isNaN(averageScore) ? 0 : averageScore;\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"AAuBA,SAASA,WAAU,QAAS,OAAO;AAEnC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,YAAY,CAAC,CAAC;IACnB,IAAI,CAACC,WAAW,CAAC,CAAC;EACpB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMF,YAAYA,CAAA,EAAG;MACnB,IAAI;QACF,MAAMG,QAAO,GAAI,MAAMR,WAAW,CAACS,WAAW,CAAC,CAAC;QAChD,IAAI,CAACP,SAAQ,GAAIM,QAAQ,CAACP,IAAI;MAChC,EAAE,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IACD,MAAMJ,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMR,WAAW,CAACY,mBAAmB,CAAC,CAAC;QACxD,IAAI,CAACT,QAAO,GAAIK,QAAQ,CAACP,IAAI;MAC/B,EAAE,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IACDG,qBAAqBA,CAACC,UAAU,EAAE;MAChC,IAAI,CAAC,IAAI,CAACX,QAAO,IAAK,CAACY,KAAK,CAACC,OAAO,CAAC,IAAI,CAACb,QAAQ,CAAC,EAAE,OAAO,CAAC;MAE7D,MAAMc,gBAAe,GAAI,IAAI,CAACd,QAAQ,CAACe,MAAM,CAACC,IAAG,IAAKA,IAAG,IAAKA,IAAI,CAACL,UAAS,KAAMA,UAAU,CAAC;MAC7F,IAAIG,gBAAgB,CAACG,MAAK,KAAM,CAAC,EAAE,OAAO,CAAC;MAE3C,MAAMC,MAAK,GAAIJ,gBAAgB,CAACK,GAAG,CAACH,IAAG,IAAKA,IAAI,CAACI,KAAK,CAAC;MACvD,MAAMC,GAAE,GAAIH,MAAM,CAACI,MAAM,CAAC,CAACC,WAAW,EAAEC,OAAO,KAAKD,WAAU,GAAIC,OAAO,EAAE,CAAC,CAAC;MAC7E,MAAMC,YAAW,GAAIJ,GAAE,GAAIH,MAAM,CAACD,MAAM;MACxC,OAAOS,KAAK,CAACD,YAAY,IAAI,IAAIA,YAAY;IAC/C;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}