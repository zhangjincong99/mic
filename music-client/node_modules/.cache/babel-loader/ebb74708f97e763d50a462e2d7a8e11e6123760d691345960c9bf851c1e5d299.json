{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"歌单评分排行榜\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.ranking, (item, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: item.rank\n    }, _toDisplayString(index + 1) + \". 用户ID: \" + _toDisplayString(item.consumerId) + \"，评分: \" + _toDisplayString(item.rank), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","ranking","item","index","key","rank","_toDisplayString","consumerId"],"sources":["E:\\javaideaiu\\class22\\mic\\music-client\\src\\views\\song-sheet\\paihangbang.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>歌单评分排行榜</h2>\r\n    <ul>\r\n      <li v-for=\"(item, index) in ranking\" :key=\"item.rank\">\r\n        {{ index + 1 }}. 用户ID: {{ item.consumerId }}，评分: {{ item.rank }}\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      ranking: [],\r\n      songListId: 'YOUR_SONG_LIST_ID', // 替换为你的歌单 ID\r\n    };\r\n  },\r\n  mounted() {\r\n    this.getRankingOfSongList();\r\n  },\r\n  methods: {\r\n    async getRankingOfSongList() {\r\n      try {\r\n        const response = await this.getRankOfSongListId(this.songListId);\r\n        this.ranking = response.data;\r\n        this.sortRankingByRank();\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n    async getRankOfSongListId(songListId) {\r\n      // 发起 HTTP 请求获取指定歌单的评分\r\n      // 假设你已经设置了网络请求库，可以使用该库的方法进行请求\r\n      const response = await axios.get(`/rankList?songListId=${songListId}`);\r\n      return response.data;\r\n    },\r\n    sortRankingByRank() {\r\n      // 按照评分进行排序\r\n      this.ranking.sort((a, b) => b.rank - a.rank);\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";gCAEIA,mBAAA,CAAgB,YAAZ,SAAO;;;uBADbC,mBAAA,CAOM,cANJC,UAAgB,EAChBF,mBAAA,CAIK,c,kBAHHC,mBAAA,CAEKE,SAAA,QAAAC,WAAA,CAFuBC,KAAA,CAAAC,OAAO,GAAvBC,IAAI,EAAEC,KAAK;yBAAvBP,mBAAA,CAEK;MAFiCQ,GAAG,EAAEF,IAAI,CAACG;wBAC3CF,KAAK,QAAO,UAAQ,GAAAG,gBAAA,CAAGJ,IAAI,CAACK,UAAU,IAAG,OAAK,GAAAD,gBAAA,CAAGJ,IAAI,CAACG,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}