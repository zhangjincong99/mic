{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"歌单评分排行榜\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.ranking, (entry, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: entry.songListId\n    }, _toDisplayString(index + 1) + \". 歌单ID: \" + _toDisplayString(entry.songListId) + \"，平均评分: \" + _toDisplayString(entry.averageScore), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","ranking","entry","index","key","songListId","_toDisplayString","averageScore"],"sources":["E:\\javaideaiu\\class22\\mic\\music-client\\src\\views\\song-sheet\\paihangbang.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>歌单评分排行榜</h2>\r\n    <ul>\r\n      <li v-for=\"(entry, index) in ranking\" :key=\"entry.songListId\">\r\n        {{ index + 1 }}. 歌单ID: {{ entry.songListId }}，平均评分: {{ entry.averageScore }}\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { HttpManager } from \"@/api\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      ranking: [], // 存储歌单评分数据的数组\r\n    };\r\n  },\r\n  created() {\r\n    this.createRanking();\r\n  },\r\n  methods: {\r\n    async createRanking() {\r\n      const songLists = await HttpManager.getSongList(); // 获取全部歌单\r\n\r\n      // 遍历每个歌单\r\n      for (const songList of songLists) {\r\n        const rankData = await HttpManager.getRankOfSongListId(songList.id); // 获取歌单评分数据\r\n\r\n        if (!Array.isArray(rankData)) {\r\n          continue; // 如果不是数组类型的数据，跳过该歌单\r\n        }\r\n\r\n        const averageScore = this.calculateAverageScore(rankData); // 计算歌单的平均评分\r\n\r\n        // 将歌单评分数据存储到对象中\r\n        const rankingEntry = {\r\n          songListId: songList.id,\r\n          averageScore: averageScore,\r\n          // 其他相关信息\r\n        };\r\n\r\n        this.ranking.push(rankingEntry);\r\n      }\r\n\r\n      this.sortRanking(); // 对歌单评分数据进行排序\r\n    },\r\n    calculateAverageScore(rankData) {\r\n      // 实现计算歌单平均评分的逻辑\r\n      if (rankData.length === 0) {\r\n        return 0; // 没有评分数据，返回0\r\n      }\r\n\r\n      const totalScore = rankData.reduce((acc, curr) => acc + curr.score, 0);\r\n      return totalScore / rankData.length;\r\n    },\r\n    sortRanking() {\r\n      // 实现排序逻辑，根据评分对歌单进行排序\r\n      this.ranking.sort((a, b) => b.averageScore - a.averageScore);\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";gCAEIA,mBAAA,CAAgB,YAAZ,SAAO;;;uBADbC,mBAAA,CAOM,cANJC,UAAgB,EAChBF,mBAAA,CAIK,c,kBAHHC,mBAAA,CAEKE,SAAA,QAAAC,WAAA,CAFwBC,KAAA,CAAAC,OAAO,GAAxBC,KAAK,EAAEC,KAAK;yBAAxBP,mBAAA,CAEK;MAFkCQ,GAAG,EAAEF,KAAK,CAACG;wBAC7CF,KAAK,QAAO,UAAQ,GAAAG,gBAAA,CAAGJ,KAAK,CAACG,UAAU,IAAG,SAAO,GAAAC,gBAAA,CAAGJ,KAAK,CAACK,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}