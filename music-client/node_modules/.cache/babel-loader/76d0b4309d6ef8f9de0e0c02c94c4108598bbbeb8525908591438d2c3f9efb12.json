{"ast":null,"code":"import { HttpManager } from \"@/api\";\nexport default {\n  data() {\n    return {\n      songLists: [],\n      rankData: []\n    };\n  },\n  mounted() {\n    this.getSongLists();\n    this.getRankData();\n  },\n  methods: {\n    async getSongLists() {\n      try {\n        const response = await HttpManager.getSongList();\n        this.songLists = response.data;\n      } catch (error) {\n        console.error(\"Error getting song lists:\", error);\n      }\n    },\n    async getRankData() {\n      try {\n        const songListIds = this.songLists.map(songList => songList.id);\n        const promises = songListIds.map(songListId => HttpManager.getRankOfSongListId(songListId));\n        const responses = await Promise.all(promises);\n        this.rankData = responses.map(response => response.data);\n      } catch (error) {\n        console.error(\"Error getting rank data:\", error);\n      }\n\n      // getRankData方法首先使用map方法从songLists数组中提取所有歌单的ID，并为每个歌单ID构建一个请求。然后，使用Promise.all方法等待所有请求完成，并使用map方法提取每个请求的响应数据，将其存储在rankData数组中。\n      // calculateAverageScore方法用于计算给定歌单ID的平均评分。首先，我们通过filter方法从rankData数组中筛选出与给定歌单ID相匹配的评分数据。然后，我们使用map方法提取每个评分数据的分数，计算总分和平均分数。最后，我们返回计算得到的平均分数。\n    },\n\n    calculateAverageScore(songListId) {\n      if (!this.rankData || !Array.isArray(this.rankData)) return 0;\n      const filteredRankData = this.rankData.filter(rankData => rankData && rankData.songListId === songListId);\n      if (filteredRankData.length === 0) return 0;\n      const scores = filteredRankData.map(rankData => rankData.score);\n      const sum = scores.reduce((accumulator, current) => accumulator + current, 0);\n      const averageScore = sum / scores.length;\n      return isNaN(averageScore) ? 0 : averageScore;\n    }\n  }\n};","map":{"version":3,"names":["HttpManager","data","songLists","rankData","mounted","getSongLists","getRankData","methods","response","getSongList","error","console","songListIds","map","songList","id","promises","songListId","getRankOfSongListId","responses","Promise","all","calculateAverageScore","Array","isArray","filteredRankData","filter","length","scores","score","sum","reduce","accumulator","current","averageScore","isNaN"],"sources":["E:\\javaideaiu\\class22\\mic\\music-client\\src\\views\\song-sheet\\paihangbang.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h1>Song List Ranking</h1>\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Rank</th>\r\n          <th>Title</th>\r\n          <th>Score</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(songList, index) in songLists\" :key=\"songList.id\">\r\n          <td>{{ index + 1 }}</td>\r\n          <td>{{ songList.title }}</td>\r\n          <td>{{ calculateAverageScore(songList.id) }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { HttpManager } from \"@/api\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      songLists: [],\r\n      rankData: [],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.getSongLists();\r\n    this.getRankData();\r\n  },\r\n  methods: {\r\n    async getSongLists() {\r\n      try {\r\n        const response = await HttpManager.getSongList();\r\n        this.songLists = response.data;\r\n      } catch (error) {\r\n        console.error(\"Error getting song lists:\", error);\r\n      }\r\n    },\r\n    async getRankData() {\r\n      try {\r\n        const songListIds = this.songLists.map(songList => songList.id);\r\n        const promises = songListIds.map(songListId => HttpManager.getRankOfSongListId(songListId));\r\n        const responses = await Promise.all(promises);\r\n        this.rankData = responses.map(response => response.data);\r\n      } catch (error) {\r\n        console.error(\"Error getting rank data:\", error);\r\n      }\r\n\r\n      // getRankData方法首先使用map方法从songLists数组中提取所有歌单的ID，并为每个歌单ID构建一个请求。然后，使用Promise.all方法等待所有请求完成，并使用map方法提取每个请求的响应数据，将其存储在rankData数组中。\r\n      // calculateAverageScore方法用于计算给定歌单ID的平均评分。首先，我们通过filter方法从rankData数组中筛选出与给定歌单ID相匹配的评分数据。然后，我们使用map方法提取每个评分数据的分数，计算总分和平均分数。最后，我们返回计算得到的平均分数。\r\n\r\n    },\r\n    calculateAverageScore(songListId) {\r\n      if (!this.rankData || !Array.isArray(this.rankData)) return 0;\r\n\r\n      const filteredRankData = this.rankData\r\n        .filter(rankData => rankData && rankData.songListId === songListId);\r\n      if (filteredRankData.length === 0) return 0;\r\n\r\n      const scores = filteredRankData.map(rankData => rankData.score);\r\n      const sum = scores.reduce((accumulator, current) => accumulator + current, 0);\r\n      const averageScore = sum / scores.length;\r\n      return isNaN(averageScore) ? 0 : averageScore;\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style>\r\n.container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n  overflow: auto;\r\n  /* 添加滚动条以查看全部内容 */\r\n}\r\n\r\n\r\ntable {\r\n  margin-top: 20px;\r\n  /* 根据需要调整表格与标题之间的间距 */\r\n}\r\n</style>"],"mappings":"AAuBA,SAASA,WAAU,QAAS,OAAO;AAEnC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,YAAY,CAAC,CAAC;IACnB,IAAI,CAACC,WAAW,CAAC,CAAC;EACpB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMF,YAAYA,CAAA,EAAG;MACnB,IAAI;QACF,MAAMG,QAAO,GAAI,MAAMR,WAAW,CAACS,WAAW,CAAC,CAAC;QAChD,IAAI,CAACP,SAAQ,GAAIM,QAAQ,CAACP,IAAI;MAChC,EAAE,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IACD,MAAMJ,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAMM,WAAU,GAAI,IAAI,CAACV,SAAS,CAACW,GAAG,CAACC,QAAO,IAAKA,QAAQ,CAACC,EAAE,CAAC;QAC/D,MAAMC,QAAO,GAAIJ,WAAW,CAACC,GAAG,CAACI,UAAS,IAAKjB,WAAW,CAACkB,mBAAmB,CAACD,UAAU,CAAC,CAAC;QAC3F,MAAME,SAAQ,GAAI,MAAMC,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;QAC7C,IAAI,CAACb,QAAO,GAAIgB,SAAS,CAACN,GAAG,CAACL,QAAO,IAAKA,QAAQ,CAACP,IAAI,CAAC;MAC1D,EAAE,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;;MAEA;MACA;IAEF,CAAC;;IACDY,qBAAqBA,CAACL,UAAU,EAAE;MAChC,IAAI,CAAC,IAAI,CAACd,QAAO,IAAK,CAACoB,KAAK,CAACC,OAAO,CAAC,IAAI,CAACrB,QAAQ,CAAC,EAAE,OAAO,CAAC;MAE7D,MAAMsB,gBAAe,GAAI,IAAI,CAACtB,QAAO,CAClCuB,MAAM,CAACvB,QAAO,IAAKA,QAAO,IAAKA,QAAQ,CAACc,UAAS,KAAMA,UAAU,CAAC;MACrE,IAAIQ,gBAAgB,CAACE,MAAK,KAAM,CAAC,EAAE,OAAO,CAAC;MAE3C,MAAMC,MAAK,GAAIH,gBAAgB,CAACZ,GAAG,CAACV,QAAO,IAAKA,QAAQ,CAAC0B,KAAK,CAAC;MAC/D,MAAMC,GAAE,GAAIF,MAAM,CAACG,MAAM,CAAC,CAACC,WAAW,EAAEC,OAAO,KAAKD,WAAU,GAAIC,OAAO,EAAE,CAAC,CAAC;MAC7E,MAAMC,YAAW,GAAIJ,GAAE,GAAIF,MAAM,CAACD,MAAM;MACxC,OAAOQ,KAAK,CAACD,YAAY,IAAI,IAAIA,YAAY;IAC/C;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}