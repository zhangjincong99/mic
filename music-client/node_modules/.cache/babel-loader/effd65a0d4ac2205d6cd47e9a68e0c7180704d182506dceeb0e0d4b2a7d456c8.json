{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"歌单评分排行榜\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.ranking, (item, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: item.songList.id\n    }, _toDisplayString(index + 1) + \". 歌单名: \" + _toDisplayString(item.songList.name) + \", 平均评分: \" + _toDisplayString(item.averageScore), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","ranking","item","index","key","songList","id","_toDisplayString","name","averageScore"],"sources":["E:\\javaideaiu\\class22\\mic\\music-client\\src\\views\\song-sheet\\paihangbang.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>歌单评分排行榜</h2>\r\n    <ul>\r\n      <li v-for=\"(item, index) in ranking\" :key=\"item.songList.id\">\r\n        {{ index + 1 }}. 歌单名: {{ item.songList.name }}, 平均评分: {{ item.averageScore }}\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { HttpManager } from \"@/api\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      ranking: []\r\n    };\r\n  },\r\n  async created() {\r\n    try {\r\n      // 获取全部歌单\r\n      const songLists = await HttpManager.getSongList();\r\n\r\n      // 遍历每个歌单\r\n      for (const songList of songLists) {\r\n        // 获取歌单的评分\r\n        const rank = await HttpManager.getRankOfSongListId(songList.id);\r\n\r\n        // 计算歌单的平均评分\r\n        const totalScore = rank.reduce((sum, r) => sum + r.score, 0);\r\n        const averageScore = totalScore / rank.length;\r\n\r\n        // 将歌单和平均评分加入排行榜数组\r\n        this.ranking.push({ songList, averageScore });\r\n      }\r\n\r\n      // 根据平均评分对歌单进行排序\r\n      this.ranking.sort((a, b) => b.averageScore - a.averageScore);\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"mappings":";gCAEIA,mBAAA,CAAgB,YAAZ,SAAO;;;uBADbC,mBAAA,CAOM,cANJC,UAAgB,EAChBF,mBAAA,CAIK,c,kBAHHC,mBAAA,CAEKE,SAAA,QAAAC,WAAA,CAFuBC,KAAA,CAAAC,OAAO,GAAvBC,IAAI,EAAEC,KAAK;yBAAvBP,mBAAA,CAEK;MAFiCQ,GAAG,EAAEF,IAAI,CAACG,QAAQ,CAACC;wBACpDH,KAAK,QAAO,SAAO,GAAAI,gBAAA,CAAGL,IAAI,CAACG,QAAQ,CAACG,IAAI,IAAG,UAAQ,GAAAD,gBAAA,CAAGL,IAAI,CAACO,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}