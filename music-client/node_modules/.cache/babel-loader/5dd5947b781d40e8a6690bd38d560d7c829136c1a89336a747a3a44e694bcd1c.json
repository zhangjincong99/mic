{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"歌单评分排行榜\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.ranking, item => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: item.songListId\n    }, [_createElementVNode(\"span\", null, _toDisplayString(item.title), 1 /* TEXT */), _createElementVNode(\"span\", null, \"评分：\" + _toDisplayString(item.score), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","ranking","item","key","songListId","_toDisplayString","title","score"],"sources":["E:\\javaideaiu\\class22\\mic\\music-client\\src\\views\\song-sheet\\paihangbang.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>歌单评分排行榜</h2>\r\n    <ul>\r\n      <li v-for=\"item in ranking\" :key=\"item.songListId\">\r\n        <span>{{ item.title }}</span>\r\n        <span>评分：{{ item.score }}</span>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { HttpManager } from \"@/api\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      ranking: [], // 评分排行榜\r\n    };\r\n  },\r\n  mounted() {\r\n    this.getSongListRanking();\r\n  },\r\n  methods: {\r\n    async getSongListRanking() {\r\n      try {\r\n        const songList = await HttpManager.getSongList(); // 获取全部歌单\r\n\r\n        for (const key in songList) {\r\n          const list = songList[key];\r\n          const rank = await HttpManager.getRankOfSongListId(list.id); // 获取指定歌单的评分\r\n          let totalScore = 0;\r\n          let averageScore = 0;\r\n\r\n          if (rank.length > 0) {\r\n            for (const r of rank) {\r\n              totalScore += r.score;\r\n            }\r\n\r\n            averageScore = totalScore / rank.length;\r\n          }\r\n\r\n          this.ranking.push({\r\n            songListId: list.id,\r\n            title: list.title,\r\n            score: averageScore,\r\n          });\r\n        }\r\n\r\n        this.ranking.sort((a, b) => b.score - a.score); // 按评分降序排序\r\n      } catch (error) {\r\n        console.error(\"获取歌单评分排行榜时出错：\", error);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";gCAEIA,mBAAA,CAAgB,YAAZ,SAAO;;;uBADbC,mBAAA,CAQM,cAPJC,UAAgB,EAChBF,mBAAA,CAKK,c,kBAJHC,mBAAA,CAGKE,SAAA,QAAAC,WAAA,CAHcC,KAAA,CAAAC,OAAO,EAAfC,IAAI;yBAAfN,mBAAA,CAGK;MAHwBO,GAAG,EAAED,IAAI,CAACE;QACrCT,mBAAA,CAA6B,cAAAU,gBAAA,CAApBH,IAAI,CAACI,KAAK,kBACnBX,mBAAA,CAAgC,cAA1B,KAAG,GAAAU,gBAAA,CAAGH,IAAI,CAACK,KAAK,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}