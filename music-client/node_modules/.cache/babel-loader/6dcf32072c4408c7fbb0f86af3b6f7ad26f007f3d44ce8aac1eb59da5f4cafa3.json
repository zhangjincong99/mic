{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"rankings\",\n  style: {\n    \"text-align\": \"center\"\n  }\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"歌单评分排行榜\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.songRankings, (item, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: item.title,\n      style: {\n        \"display\": \"flex\",\n        \"justify-content\": \"space-between\"\n      }\n    }, [_createElementVNode(\"span\", null, _toDisplayString(index + 1), 1 /* TEXT */), _createElementVNode(\"span\", null, _toDisplayString(item.title), 1 /* TEXT */), _createElementVNode(\"span\", null, _toDisplayString(item.score), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","style","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_Fragment","_renderList","$data","songRankings","item","index","key","title","_toDisplayString","score"],"sources":["E:\\javaideaiu\\class22\\mic\\music-client\\src\\views\\paihangbang.vue"],"sourcesContent":["<template>\r\n    <div class=\"rankings\" style=\"text-align: center;\">\r\n        <h1>歌单评分排行榜</h1>\r\n        <ul>\r\n            <li v-for=\"(item, index) in songRankings\" :key=\"item.title\"\r\n                style=\"display: flex; justify-content: space-between;\">\r\n                <span>{{ index + 1 }}</span>\r\n                <span>{{ item.title }}</span>\r\n                <span>{{ item.score }}</span>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\nexport default {\r\n    data() {\r\n        return {\r\n            rankList: [\r\n                [2, 7],\r\n                [2, 3],\r\n                [1, 4],\r\n                [13, 5],\r\n                [21, 5],\r\n                [31, 5],\r\n                [5, 0],\r\n                [11, 4],\r\n                [10, 10],\r\n                [6, 6],\r\n                [7, 10],\r\n                [1, 4],\r\n                [7, 2],\r\n                [3, 5],\r\n                [14, 9],\r\n            ],\r\n            songRankings: [],\r\n        };\r\n    },\r\n    mounted() {\r\n        this.calculateRankings();\r\n    },\r\n    methods: {\r\n        calculateRankings() {\r\n            const averageScores = this.rankList.map((item) => {\r\n                const songListId = item[1];\r\n                const score = item[3];\r\n                return { songListId, score };\r\n            });\r\n\r\n            averageScores.sort((a, b) => b.score - a.score);\r\n\r\n            const songListDetails = {\r\n                2: { title: '歌单2' },\r\n                1: { title: '歌单1' },\r\n                13: { title: '歌单13' },\r\n                21: { title: '歌单21' },\r\n                31: { title: '歌单31' },\r\n                5: { title: '歌单5' },\r\n                11: { title: '歌单11' },\r\n                10: { title: '歌单10' },\r\n                6: { title: '歌单6' },\r\n                7: { title: '歌单7' },\r\n                3: { title: '歌单3' },\r\n                14: { title: '歌单14' },\r\n            };\r\n\r\n            this.songRankings = averageScores.map((item, index) => {\r\n                const songListId = item.songListId;\r\n                const title = songListDetails[songListId].title;\r\n                const score = item.score.toFixed(1);\r\n                return { title, score };\r\n            });\r\n        },\r\n        updateScore(songListId, newScore) {\r\n            // 找到要更新的歌单项并更新评分\r\n            const updatedIndex = this.rankList.findIndex((item) => item[1] === songListId);\r\n            if (updatedIndex !== -1) {\r\n                this.rankList[updatedIndex][3] = newScore;\r\n                // 重新计算歌单评分排行榜\r\n                this.calculateRankings();\r\n            }\r\n        },\r\n    },\r\n};\r\n</script>\r\n  \r\n<style>\r\n/* 无样式 */\r\n</style>\r\n  "],"mappings":";;EACSA,KAAK,EAAC,UAAU;EAACC,KAA2B,EAA3B;IAAA;EAAA;;gCAClBC,mBAAA,CAAgB,YAAZ,SAAO;;;uBADfC,mBAAA,CAUM,OAVNC,UAUM,GATFC,UAAgB,EAChBH,mBAAA,CAOK,c,kBANDC,mBAAA,CAKKG,SAAA,QAAAC,WAAA,CALuBC,KAAA,CAAAC,YAAY,GAA5BC,IAAI,EAAEC,KAAK;yBAAvBR,mBAAA,CAKK;MALsCS,GAAG,EAAEF,IAAI,CAACG,KAAK;MACtDZ,KAAsD,EAAtD;QAAA;QAAA;MAAA;QACAC,mBAAA,CAA4B,cAAAY,gBAAA,CAAnBH,KAAK,sBACdT,mBAAA,CAA6B,cAAAY,gBAAA,CAApBJ,IAAI,CAACG,KAAK,kBACnBX,mBAAA,CAA6B,cAAAY,gBAAA,CAApBJ,IAAI,CAACK,KAAK,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}