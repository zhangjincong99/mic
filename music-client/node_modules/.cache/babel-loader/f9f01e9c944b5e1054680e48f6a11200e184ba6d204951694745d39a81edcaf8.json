{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"歌单评分排行榜\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.songLists, songList => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: songList.id\n    }, [_createElementVNode(\"span\", null, _toDisplayString(songList.name), 1 /* TEXT */), _createElementVNode(\"span\", null, _toDisplayString(songList.averageRank), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","songLists","songList","key","id","_toDisplayString","name","averageRank"],"sources":["E:\\javaideaiu\\class22\\mic\\music-client\\src\\views\\song-sheet\\paihangbang.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>歌单评分排行榜</h1>\r\n    <ul>\r\n      <li v-for=\"songList in songLists\" :key=\"songList.id\">\r\n        <span>{{ songList.name }}</span>\r\n        <span>{{ songList.averageRank }}</span>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      songLists: []\r\n    };\r\n  },\r\n  mounted() {\r\n    this.getRankings();\r\n  },\r\n  methods: {\r\n    async getRankings() {\r\n      try {\r\n        const response = await this.$api.getRankOfSongListId();\r\n        this.songLists = response.data;\r\n        this.calculateAverageRank();\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n    calculateAverageRank() {\r\n      for (let songList of this.songLists) {\r\n        let totalRank = 0;\r\n        for (let rank of songList.ranks) {\r\n          totalRank += rank.score;\r\n        }\r\n        songList.averageRank = totalRank / songList.ranks.length;\r\n      }\r\n      this.songLists.sort((a, b) => b.averageRank - a.averageRank);\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"mappings":";gCAEIA,mBAAA,CAAgB,YAAZ,SAAO;;;uBADbC,mBAAA,CAQM,cAPJC,UAAgB,EAChBF,mBAAA,CAKK,c,kBAJHC,mBAAA,CAGKE,SAAA,QAAAC,WAAA,CAHkBC,KAAA,CAAAC,SAAS,EAArBC,QAAQ;yBAAnBN,mBAAA,CAGK;MAH8BO,GAAG,EAAED,QAAQ,CAACE;QAC/CT,mBAAA,CAAgC,cAAAU,gBAAA,CAAvBH,QAAQ,CAACI,IAAI,kBACtBX,mBAAA,CAAuC,cAAAU,gBAAA,CAA9BH,QAAQ,CAACK,WAAW,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}