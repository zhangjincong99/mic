{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"audioElement\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"audio\", _hoisted_1, null, 512 /* NEED_PATCH */), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.togglePlay && $setup.togglePlay(...args))\n  }, \"Toggle Play\")]);\n}","map":{"version":3,"names":["ref","_createElementBlock","_createElementVNode","_hoisted_1","onClick","_cache","args","$setup","togglePlay"],"sources":["E:\\javaideaiu\\class22\\mic\\music-manage\\src\\components\\layouts\\YinAudio.vue"],"sourcesContent":["<template>\n  <div>\n    <audio ref=\"audioElement\"></audio>\n    <button @click=\"togglePlay\">Toggle Play</button>\n  </div>\n</template>\n\n<script>\nimport { nextTick, ref } from 'vue';\n\nexport default {\n  setup() {\n    const audioRef = ref(null);\n  \n    // 开始/暂停\n    function togglePlay() {\n      nextTick(() => {\n        const audioElement = audioRef.value;\n        if (audioElement) {\n          if (audioElement.paused) {\n            audioElement.play().catch((error) => {\n              console.error(\"Failed to play audio:\", error);\n            });\n          } else {\n            audioElement.pause();\n          }\n        }\n      });\n    }\n\n    return {\n      audioRef,\n      togglePlay\n    };\n  }\n};\n</script>\n\n<style>\naudio {\n  display: none;\n}\n</style>\n"],"mappings":";;EAEWA,GAAG,EAAC;AAAc;;uBAD3BC,mBAAA,CAGM,cAFJC,mBAAA,CAAkC,SAAlCC,UAAkC,+BAClCD,mBAAA,CAAgD;IAAvCE,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,MAAA,CAAAC,UAAA,IAAAD,MAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;KAAE,aAAW,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}